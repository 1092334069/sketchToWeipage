@import 'console.cocoascript';

var common = {
	maskObjectID: undefined,
 	regexNames: /OVERLAY\#|WIDTH\#|HEIGHT\#|TOP\#|RIGHT\#|BOTTOM\#|LEFT\#|VERTICAL\#|HORIZONTAL\#|NOTE\#|PROPERTY\#|LITE\#/,

 	hasExportSizes: function(layer){
    	return layer.exportOptions().exportFormats().count() > 0;
  	},

  	isSliceGroup: function(layer) {
    	return common.is(layer, MSLayerGroup) && common.hasExportSizes(layer);
  	},

  	isExportable: function(layer) {
    	return common.is(layer, MSTextLayer) ||
      		common.is(layer, MSShapeGroup) ||
      		common.is(layer, MSRectangleShape) ||
      		common.is(layer, MSOvalShape) ||
      		common.is(layer, MSShapePathLayer) ||
      		common.is(layer, MSTriangleShape) ||
      		common.is(layer, MSStarShape) ||
      		common.is(layer, MSPolygonShape) ||
      		common.is(layer, MSBitmapLayer) ||
      		common.is(layer, MSSliceLayer) ||
      		common.is(layer, MSSymbolInstance) ||
      		common.isSliceGroup(layer)
  	},

  	getStates: function(layer){
    	var isVisible = true,
      		isLocked = false,
      		hasSlice = false,
      		isEmpty = false,
      		isMaskChildLayer = false,
      		isMeasure = false,
      		isShapeGroup = false;

    	while (!(common.is(layer, MSArtboardGroup) || common.is(layer, MSSymbolMaster))) {
      		var group = layer.parentGroup();
      		if(common.regexNames.exec(group.name())) {
        		isMeasure = true;
      		}
      		if(common.is(group, MSShapeGroup)) {
        		isShapeGroup = true;
      		}
      		if (!layer.isVisible()) {
        		isVisible = false;
      		}
      		if (layer.isLocked()) {
        		isLocked = true;
      		}
      		if (common.is(group, MSLayerGroup) && common.hasExportSizes(group)) {
        		hasSlice = true
      		}
      		if (this.maskObjectID && group.objectID() == this.maskObjectID && !layer.shouldBreakMaskChain()) {
        		isMaskChildLayer = true
      		}
      		if (common.is(layer, MSTextLayer) && layer.isEmpty()) {
        		isEmpty = true
      		}
      		layer = group;
    	}
    	return {
      		isVisible: isVisible,
      		isLocked: isLocked,
      		hasSlice: hasSlice,
      		isMaskChildLayer: isMaskChildLayer,
      		isMeasure: isMeasure,
      		isEmpty: isEmpty,
      		isShapeGroup: isShapeGroup
    	}
  	},

  	/** 
   	* 判断图层类型
   	* @param layer 图层
   	* @param theClass 类型
   	*/
  	is: function(layer, theClass) {
      	if(!layer) return false;
      	var klass = layer.class();
      	return klass === theClass;
  	},

  	/** 
   	* 判断是否有导出项
   	* @param layer 图层
   	*/
	hasExportSizes: function(layer){
		return layer.exportOptions().exportFormats().count() > 0;
	},

  	/** 
   	* 获取图层详情
   	* @param artboard 面板
   	* @param layer 图层
   	*/
	getLayerDetail: function(artboard, layer){
		var artboardRect = artboard.absoluteRect();
		var layerType = common.is(layer, MSTextLayer) ? "text" :
				common.is(layer, MSSymbolInstance) ? "symbol" :
				common.is(layer, MSSliceLayer) || common.hasExportSizes(layer)? "slice":
				"shape";
    	var exportLayerRect;
    	console.log(layer.objectID())
    	console.log(layerType)
    	if(layerType != "text") {
			var influenceCGRect = layer.absoluteInfluenceRect();
			exportLayerRect = {
				x: function(){return influenceCGRect.origin.x;},
				y: function(){return influenceCGRect.origin.y;},
				width: function(){return influenceCGRect.size.width;},
				height: function(){return influenceCGRect.size.height;}
			}
		} else{
			exportLayerRect = layer.absoluteRect();
		}
		console.log(exportLayerRect)
		console.log(artboardRect)
		var res = common.rectToJSON(exportLayerRect, artboardRect)
		console.log(res)
		return res
	},

	/**
	* 获取坐标数据
	* @param react 图层坐标
	* @param referenceRect 图层父坐标
	*/
	rectToJSON: function(rect, referenceRect) {
		if (referenceRect) {
			return {
				x: Math.round( ( rect.x() - referenceRect.x() ) * 10 ) / 10,
				y: Math.round( ( rect.y() - referenceRect.y() ) * 10 ) / 10,
				width: Math.round( rect.width() * 10 ) / 10,
				height: Math.round( rect.height() * 10 ) / 10
			};
		}

		return {
			x: Math.round( rect.x() * 10 ) / 10,
			y: Math.round( rect.y() * 10 ) / 10,
			width: Math.round( rect.width() * 10 ) / 10,
			height: Math.round( rect.height() * 10 ) / 10
		};
	}
}